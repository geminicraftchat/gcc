# GeminiCraftChat 配置文件
#
# 长思考功能说明：
# - 每个API接口都支持独立的超时配置
# - long_thinking: true 启用长思考模式，适合复杂问题
# - read 超时时间建议：快速模型60s，思考型模型180-300s
# - 使用 /gcc timeout 命令管理超时设置

# 调试模式
debug: true

# API 设置
api:
  # 可用的模型列表 - 完全可配置的API接口
  # 每个模型都支持独立的超时设置和长思考模式
  models:
    api1:
      name: "API接口1"
      model: "gpt-3.5-turbo"
      base_url: "https://api.openai.com/v1/chat/completions"
      api_key: "your-api-key-here"
      max_tokens: 4096
      temperature: 0.7
      # 超时设置（秒）- 长思考功能配置
      timeout:
        connect: 30        # 连接超时：建立HTTP连接的最大等待时间
        read: 60          # 读取超时：等待API响应的最大时间（适合快速响应的模型）
        write: 30         # 写入超时：发送请求数据的最大等待时间
        long_thinking: false  # 长思考模式：是否允许AI花费更多时间深度思考
      # 请求配置
      request:
        method: "POST"
        headers:
          "Content-Type": "application/json"
          "Authorization": "Bearer {api_key}"
        # 请求体模板，支持变量替换
        body_template: |
          {
            "model": "{model}",
            "messages": {messages},
            "temperature": {temperature},
            "max_tokens": {max_tokens}
          }
      # 响应解析配置
      response:
        # 响应内容的JSON路径
        content_path: "choices[0].message.content"
        # 错误信息的JSON路径
        error_path: "error.message"
      # 额外参数
      parameters:
        frequency_penalty: 0.0
        presence_penalty: 0.0
        top_p: 1.0

    api2:
      name: "API接口2"
      model: "claude-3-sonnet-20240229"
      base_url: "https://api.anthropic.com/v1/messages"
      api_key: "your-api-key-here"
      max_tokens: 4096
      temperature: 0.7
      # 超时设置（秒）- 长思考功能配置
      timeout:
        connect: 30        # 连接超时：建立HTTP连接的最大等待时间
        read: 180         # 读取超时：等待API响应的最大时间（Claude需要更长思考时间）
        write: 30         # 写入超时：发送请求数据的最大等待时间
        long_thinking: true   # 长思考模式：启用后允许AI进行深度思考
      request:
        method: "POST"
        headers:
          "Content-Type": "application/json"
          "x-api-key": "{api_key}"
          "anthropic-version": "2023-06-01"
        body_template: |
          {
            "model": "{model}",
            "messages": {messages},
            "max_tokens": {max_tokens},
            "temperature": {temperature}
          }
      response:
        content_path: "content[0].text"
        error_path: "error.message"
      parameters:
        top_p: 1.0
        top_k: 40

    api3:
      name: "API接口3"
      model: "qwen-turbo"
      base_url: "https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation"
      api_key: "your-api-key-here"
      max_tokens: 4096
      temperature: 0.7
      # 超时设置（秒）
      timeout:
        connect: 30        # 连接超时
        read: 120         # 读取超时（中等思考时间）
        write: 30         # 写入超时
        long_thinking: true   # 启用长思考模式
      request:
        method: "POST"
        headers:
          "Content-Type": "application/json"
          "Authorization": "Bearer {api_key}"
        body_template: |
          {
            "model": "{model}",
            "input": {
              "messages": {messages}
            },
            "parameters": {
              "temperature": {temperature},
              "max_tokens": {max_tokens}
            }
          }
      response:
        content_path: "output.choices[0].message.content"
        error_path: "error.message"
      parameters:
        top_p: 0.8
        top_k: 50
        repetition_penalty: 1.1

    api4:
      name: "API接口4"
      model: "moonshot-v1-8k"
      base_url: "https://api.moonshot.cn/v1/chat/completions"
      api_key: "your-api-key-here"
      max_tokens: 4096
      temperature: 0.7
      # 超时设置（秒）
      timeout:
        connect: 30        # 连接超时
        read: 90          # 读取超时（月之暗面模型）
        write: 30         # 写入超时
        long_thinking: true   # 启用长思考模式
      request:
        method: "POST"
        headers:
          "Content-Type": "application/json"
          "Authorization": "Bearer {api_key}"
        body_template: |
          {
            "model": "{model}",
            "messages": {messages},
            "temperature": {temperature},
            "max_tokens": {max_tokens}
          }
      response:
        content_path: "choices[0].message.content"
        error_path: "error.message"
      parameters:
        frequency_penalty: 0.0
        presence_penalty: 0.0
        top_p: 1.0

    api5:
      name: "API接口5"
      model: "gemini-pro"
      base_url: "https://api.yoururl.com/v1/chat/completions"
      api_key: "your-api-key-here"
      max_tokens: 4096
      temperature: 0.7
      # 超时设置（秒）
      timeout:
        connect: 30        # 连接超时
        read: 300         # 读取超时（支持超长思考时间）
        write: 30         # 写入超时
        long_thinking: true   # 启用长思考模式
      request:
        method: "POST"
        headers:
          "Content-Type": "application/json"
          "Authorization": "Bearer {api_key}"
        body_template: |
          {
            "model": "{model}",
            "messages": {messages},
            "temperature": {temperature},
            "max_tokens": {max_tokens}
          }
      response:
        content_path: "choices[0].message.content"
        error_path: "error.message"
      parameters:
        top_p: 0.8
        top_k: 40

  # 当前使用的模型
  current_model: "api1"
  
  # 代理服务器设置
  http_proxy:
    enabled: false
    host: "127.0.0.1"
    port: 7890
    type: "SOCKS" # 可选值: SOCKS, HTTP

# 权限设置
permissions:
  use_command: "gcc.use"
  admin: "gcc.admin"
  model_switch: "gcc.model.switch"
  temperature_adjust: "gcc.temperature.adjust"
  broadcast_receive: "gcc.broadcast.receive"
  broadcast_bypass: "gcc.broadcast.bypass"

# 日志设置
logging:
  enabled: true
  directory: "logs"
  format: "yyyy-MM-dd_HH-mm-ss"
  # 日志文件分类
  separate_files: true  # 是否分别保存不同类型的日志
  # 日志保留天数
  retention_days: 30
  # 包含的日志类型
  include:
    chat: true                    # 聊天记录
    commands: true                # 命令执行记录
    errors: true                  # 错误记录
    model_changes: true           # 模型切换记录
    temperature_changes: true     # 温度调整记录
    api_calls: true               # API调用记录
    api_requests: true            # 详细的API请求内容
    api_responses: true           # 详细的API响应内容
    performance: true             # 性能统计
    player_stats: true            # 玩家使用统计
  # 详细程度设置
  detail_level:
    api_requests: "full"          # full/headers_only/minimal
    api_responses: "content_only" # full/content_only/minimal
    performance: "summary"        # full/summary/minimal

# 聊天设置
chat:
  # 触发词设置
  trigger: "ai"
  trigger_words:
    - "ai"
    - "@ai"
    - "!ai"
  # 消息格式
  format:
    thinking: "§7[AI] §f正在思考中..."
    response: "§7[AI] §f%s"
    error: "§c[AI] 发生错误：%s"
    empty_question: "§c[AI] 请输入你的问题"
    cooldown: "§c[AI] 请等待 %d 秒后再次提问"
    no_permission: "§c[AI] 你没有权限使用此功能"
    model_switch_success: "§a[AI] 已切换到模型: %s"
    model_switch_fail: "§c[AI] 切换模型失败: %s"
    temperature_set: "§a[AI] 已将温度设置为: %.2f"
    persona_switch: "§a[AI] 已切换到人设: %s"
    persona_list: "§a[AI] 可用的人设列表:"
    persona_not_found: "§c[AI] 找不到指定的人设: %s"
    history_cleared: "§a[AI] 已清除对话历史"
    all_history_cleared: "§a[AI] 已清除所有玩家的对话历史"
  # 冷却时间 (毫秒)
  cooldown: 10000
  # 历史记录长度限制
  max_history: 10
  # 广播设置
  broadcast:
    enabled: true
    to_players: true
    to_console: true
    format:
      question: "§8[AI] §7{player} §f问: §7{message}"
      answer: "§8[AI] §7回答 §f{player}: §7{message}"
    ignore_personas:
      - "private"
      - "secret"

# 人设配置
personas:
  default:
    name: "默认助手"
    description: "一个友好的AI助手"
    context: "你是一个友好的AI助手，会用简短的语言回答问题。"
  minecraft:
    name: "MC专家"
    description: "Minecraft游戏专家"
    context: "你是一个Minecraft游戏专家，精通红石、建筑和游戏机制，会用简短的语言回答问题。"
  rpg:
    name: "RPG角色"
    description: "角色扮演游戏中的NPC"
    context: "你是一个生活在中世纪魔法世界的NPC，说话时要符合角色设定，用简短的语言回答问题。"

# 敏感词过滤
filter:
  enabled: true
  words:
    - "敏感词1"
    - "敏感词2"
  replacement: "***"

# 命令设置
commands:
  # 中文命令
  chinese:
    clear_memory: ["清除记忆", "清空记忆", "忘记对话"]
    switch_persona: ["切换人设", "换个角色", "更换人设"]
    list_personas: ["查看人设", "人设列表", "所有角色"]
    help: ["帮助", "指令", "命令"] 